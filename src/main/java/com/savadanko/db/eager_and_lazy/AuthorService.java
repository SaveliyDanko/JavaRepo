package com.savadanko.JavaRepo.db.eager_and_lazy;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
public class AuthorService {
    private final AuthorRepository repository;

    @Transactional
    public void createData() {
        Author author = new Author("–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π");
        author.addBook(new Book("–í–æ–π–Ω–∞ –∏ –º–∏—Ä"));
        author.addBook(new Book("–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞"));
        repository.save(author);
    }

    @Transactional(readOnly = true)
    public void testLazy() {
        /*
        Lazy:
        Hibernate:
            select
                a1_0.id,
                a1_0.name
            from
                author a1_0
            where
                a1_0.id=?

         Eager
         Hibernate:
            select
                a1_0.id,
                a1_0.name,
                b1_0.author_id,
                b1_0.id,
                b1_0.title
            from
                author a1_0
            left join
                book b1_0
                    on a1_0.id=b1_0.author_id
            where
                a1_0.id=?
         */

        Author author = repository.findById(1L).orElseThrow();
        System.out.println("–ê–≤—Ç–æ—Ä: " + author.getName());
        System.out.println("-----");

        // üîπ –ó–¥–µ—Å—å –ø–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫–Ω–∏–≥–∞–º –Ω–µ—Ç (Lazy)
        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥: " + author.getBooks().size());
        // ‚ö†Ô∏è –¢–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ getBooks() Hibernate –≤—ã–ø–æ–ª–Ω–∏—Ç SQL SELECT
    }
}

